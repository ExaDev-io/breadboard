{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://raw.githubusercontent.com/breadboard-ai/breadboard/@google-labs/breadboard-schema@1.3.0/packages/schema/breadboard.schema.json",
  "title": "Breadboard",
  "description": "An executable program graph",
  "$defs": {
    "edgePort": {
      "anyOf": [
        {
          "type": "string",
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_-]*$"
        },
        {
          "type": "string",
          "const": "$error",
          "description": "Special port that is used to pass errors"
        }
      ]
    },
    "nodeId": {
      "type": "string",
      "pattern": "^[a-zA-Z_][a-zA-Z0-9_-]*$"
    },
    "nodeType": {
      "anyOf": [
        {
          "type": "string",
          "const": "input",
          "description": "A node that represents an input"
        },
        {
          "type": "string",
          "const": "output",
          "description": "A node that represents an output"
        },
        {
          "type": "string",
          "const": "lambda",
          "description": "A node that represents a lambda"
        },
        {
          "pattern": "^[a-zA-Z_][a-zA-Z0-9_-]*$",
          "description": "A custom node type"
        }
      ]
    },
    "nullish": {
      "oneOf": [
        {
          "type": "string",
          "const": ""
        },
        {
          "type": null,
          "const": null
        }
      ]
    }
  },
  "type": "object",
  "required": [
    "nodes",
    "edges"
  ],
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri-reference"
    },
    "title": {
      "description": "A human-readable title for the graph",
      "type": "string"
    },
    "description": {
      "description": "Description of the graph",
      "type": "string"
    },
    "version": {
      "description": "Semantic version of the graph\nSee https://semver.org/",
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
    },
    "nodes": {
      "description": "All of the nodes in the graph",
      "type": "array",
      "items": {
        "description": "A \"step\" or \"function\" in the program which performs computation",
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Identifier for this node that is unique to this graph",
            "$ref": "#/$defs/nodeId"
          },
          "type": {
            "description": "The type of the node",
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z0-9_-]*$",
            "$ref": "#/$defs/nodeType"
          },
          "configuration": {
            "description": "Type-specific configuration of the node",
            "type": "object",
            "additionalProperties": true
          }
        }
      }
    },
    "edges": {
      "description": "All of the edges in the graph",
      "type": "array",
      "items": {
        "description": "A connection between two nodes through which data flows",
        "type": "object",
        "required": [
          "from",
          "to"
        ],
        "additionalProperties": false,
        "properties": {
          "from": {
            "description": "The ID of the source node",
            "$ref": "#/$defs/nodeId"
          },
          "to": {
            "description": "The ID of the destination node",
            "$ref": "#/$defs/nodeId"
          },
          "out": {
            "description": "The output port of the `from` node.\nIf \"*\", then all outputs of the `from` node are passed to the `to` node. In this case `in` must be empty string or undefined.\nIf undefined or empty string, then no data is passed, and the nodes are instead connected purely for yielding control flow. In this case `in` must be empty string or undefined."
          },
          "in": {
            "description": "The input port of the `to` node.\nMust be empty string or undefined if and only if `out` is either \"*\" or itself empty string or undefined."
          },
          "optional": {
            "description": "If true, nodes connected to this edge won't wait for data to appear before proceding with execution.",
            "type": "boolean"
          },
          "constant": {
            "description": "If true, the most recent data that passed through this edge will remain available indefinitely, instead of being destructively consumed.",
            "type": "boolean"
          }
        },
        "oneOf": [
          {
            "required": [],
            "properties": {
              "out": {
                "$ref": "#/$defs/nullish",
                "description": "If undefined or empty string, then no data is passed, and the nodes are instead connected purely for yielding control flow."
              },
              "in": {
                "$ref": "#/$defs/nullish",
                "description": "Must be empty string or undefined if and only if `out` is either \"*\" or itself empty string or undefined."
              }
            }
          },
          {
            "required": [
              "out"
            ],
            "properties": {
              "out": {
                "const": "*",
                "description": "If \"*\", then all outputs of the `from` node are passed to the `to` node."
              },
              "in": {
                "$ref": "#/$defs/nullish",
                "description": "Must be empty string or undefined if and only if `out` is either \"*\" or itself empty string or undefined."
              }
            }
          },
          {
            "required": [
              "out",
              "in"
            ],
            "properties": {
              "out": {
                "$ref": "#/$defs/edgePort",
                "description": "The output port of the `from` node."
              },
              "in": {
                "$ref": "#/$defs/edgePort",
                "description": "The input port of the `to` node."
              }
            }
          }
        ]
      }
    },
    "kits": {
      "description": "All of the kits this graph depends on",
      "type": "array",
      "items": {
        "description": "A library that will be imported prior to execution for providing handlers for non built-in node types.",
        "type": "object",
        "required": [
          "url"
        ],
        "additionalProperties": false,
        "properties": {
          "url": {
            "description": "Address of the kit",
            "type": "string",
            "format": "uri"
          }
        }
      }
    },
    "graphs": {
      "description": "Sub-graphs that can be referred to by nodes in the parent graph.",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^[a-zA-Z_][a-zA-Z0-9_-]*$": {
          "$ref": "#"
        }
      }
    },
    "args": {
      "description": "Arguments that are passed to the graph, useful to bind values to lambdas.",
      "type": "object",
      "additionalProperties": true
    }
  }
}
